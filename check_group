#!/usr/bin/perl -ln
#
# Copyright 2000 Daniel Klein, dvk@lonewolf.com - Unlimited distribution and
# use permitted as long as this copyright notice is included in all copies.
#
#
# Check /etc/group for problems.  The switches in the first line do this:
#	-l	automatically chomp input, automatic \n after each output
#	-n	put a loop around the code below, reading lines from ARGV
#
# Start by forcing automatic read to get data from /etc/group
#
BEGIN {
    @ARGV = ("/etc/group");
    }
#
# Simple subroutine that prints the header the first time it is called, and
# never again after that - which means that if there are no errors, then
# *nothing* is printed (which is good for quiet, but bad unless you are
# *sure* that the program is being run when you want it to :-)
#
sub msg {
    print "Checking /etc/group:\n"	unless $header++;
    print @_;
    }
#
# Split up the input, as delimited by colons.  Note to people reading the
# Perl documentation: you may think we can use -aF: on the command line, but
# this won't work, because unless you specify a limit field, split throws
# away trailing empty fields - and we need to count them!
#
@F = split /:/, $_, -1;
#
# This is the main work - the error messages explain what each test is
# looking for in the input line.
#
/^\s*$/		&&
    do {
	msg "Line $. is a blank line";
	next;
	};

@F != 4		&&
    do {
	msg "Line $. has the wrong number of fields";
	next;
	};

$F[0] =~ /\W/	&&
	msg "Group '$F[0]' has non-alphanumeric characters";

length($F[0]) > 12	&&
	msg "Group '$F[0]' has more than 8 characters";

$login{substr($F[0],0,8)}++	&&
	msg "Group '$F[0]' is not unique (past 8 characters)";

$uid{$F[2]}++	&&
	msg "Group '$F[0]' shares GID $F[2] with another group";

$F[2] < 0	&&
	msg "User '$F[0]' has a negative GID";
