#!/usr/bin/perl -w
# $Id: StopIntruder 13 2012-02-08 16:06:31Z rohare $
# $URL: file:///usr/local/svn/admin/scripts/StopIntruder $
#
# This script will add an iptable rule to prevent access to
# to anyone repeatedly failing to login. The rule is not
# saved and thus will go away on restart.
#
use strict;

$ENV{PATH} = "/usr/local/bin:/bin:/usr/bin:/sbin"; # Ensure a secure PATH

my %count;
my $rc;

print "Starting Stop Intruder\n";

# One day test
$rc = Blocker('today','5','today','now');

# Weekly long test
$rc = Blocker('this week','10','this-week','now');

# Month long test
$rc = Blocker('this month','20','this-month','now');

exit 0;


#
## Blocker
#
sub Blocker {
	my $period = shift @_;
	my $limit = shift @_;
	my $ts = shift @_;
	my $te = shift @_;

	$rc = &au_counter($ts,$te);

	foreach my $host (keys %count) {
		$host eq "" && next;
		if ($count{$host} > $limit) {
			if ( $host =~ /[a-z]/ ) {
				$rc = `iptables -L BlockedIP | grep -c "$host"`;
			} else {
				$rc = `iptables -L BlockedIP -n | grep -c "$host"`;
			}
			if ( $rc == 0 ) {
				printf("%d\tlogin attempts from %s %s, Applying Filters\n",
				$count{$host}, $host, $period);
				`iptables -I BlockedIP 1 -s "$host" -m state --state NEW -j DROP`
			} else {
				printf("%d\tlogin attempts from %s %s\n",
					$count{$host}, $host, $period);
			}
				
		}
	}
}


#
## Failed connection counter
#
sub au_counter {
	my $ts = shift @_;
	my $te = shift @_;
	undef %count;

	my @list = `/sbin/aureport -l --failed --input-logs -ts $ts -te $te`
		or die "Can execute: $!";

	foreach my $line (@list) {
		my ($rdate,$rtime,$racct,$rhost,$rterm,$rexe,$rsuccess);
		my @line;

		chomp $line;
		$line =~ /^Login Report/ && next;
		$line =~ /^=====/ && next;
		$line =~ /^<no events/ && next;
		$line =~ /^#/ && next;
		$line =~ /^$/ && next;
		$line =~ s/::ffff://;
		$line =~ s/(\(\w+)\s+(\w+\))/$1_$2/;
		
		@line = split(/ /,$line);

		
		defined $line[4] or next;
		$line[4] =~ /^\?$/ && next;
		$line[4] =~ /^192\.168\./ && next;
		$line[4] =~ /^127\.0\.0\.1/ && next;
		$line[5] =~ /pts/ && next;
		if (defined $count{$line[4]}) {
			 $count{$line[4]} += 1;
		} else {
			 $count{$line[4]} = 1;
		}
			
	}
	`service iptables save`;
}
