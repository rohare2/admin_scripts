#!/usr/bin/perl
#
# #
# Copyright 2000 Daniel Klein, dvk@lonewolf.com - Unlimited distribution and
# use permitted as long as this copyright notice is included in all copies.
#
# Check /var/log/messages for people who "su" to another account.  We
# have a list of people who we expect to su to various accounts in %ok.
# Keep track of, and report everyone else.  We ingnore BAD SU attempts.
#
die "Can't open /var/log/messages\n" unless open(LOG, "/var/log/messages");

#
# This is a hierarchical hash table.  The top level keys are the accounts
# we want to check, and the second level keys are the people we allow to
# su to that account.  Anyone NOT in this table gets logged.  There is one
# special case - root can su to anyone, so we don't check (we have to trust,
# someone!)
#
%ok = (
	root => {
		rohare => 1,	# rohare can su to root
		},
	xrohare => {
		rohare => 1,	# rohare can su to xrohare
		},
	www => {
		rohare => 1,	# rohare can su to www
		},
	);

#
# Here's the mainwork loop - just read in a line, and if it looks like this:
#	Feb 14 18:04:53 calf su: dvk to root on /dev/ttyp0
# then extract the "from" (dvk) and the "to" (root).  Then, if it is not in
# the %ok hash, log it for reporting later.
#
while (<LOG>) {
	next unless /su:/;
	next if /BAD SU/;
	
	/su: (\w+) to (\w+)/;   # Simple pattern match
	next if $ok{$2}->{$1};	# Skip what we say is okay
	$total++;
	$su{$1}->{$2}++;		# Log the from->to map
	}

exit unless $total;			# If no su's, just quit

for $from (keys %su) {
	for $to (keys %{ $su{$from} }) {
		print "$from\tunexpected su to $to ($su{$from}{$to} times)\n";
		}
	}
