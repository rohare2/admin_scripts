#!/usr/bin/perl
#
# Copyright 2000 Daniel Klein, dvk@lonewolf.com - Unlimited distribution and
# use permitted as long as this copyright notice is included in all copies.
#
use strict;
use Getopt::Std;

use vars qw($first $last $cnt $from $to $opt_a
	    $ruleset $arg1 $relay $reject $message
	    %ruleset %arg1 %relay %reject %message
	    );

getopts('a')	|| die "Usage: $0 [-a] [sendmail-logfile ...]\n";

##
# smreject - Processes rejected message entries from sendmail logfile.
#
# This program will read /var/log/maillog by default, but you can also give
# it a list of files (including gzipped files) as arguments, and it will
# summarize all of them.
#
# Mail log lines for rejected messages look like this:
#
# Feb 15 03:34:27 cub sendmail[21925]: DAA21925: ruleset=check_mail, arg1=<vacationfree5@happster.com>, relay=[195.249.83.196], reject=451 <vacationfree5@happster.com>... Sender domain must resolve
#
##

@ARGV = ("/var/log/maillog")	unless @ARGV;

for my $file (@ARGV) {
    if ($file =~ /\.gz$/) {
	open(INPUT, "gunzip -c $file |") || die "Can't open $file - $!";
	}
    else {
	open(INPUT, "$file") || die "Can't open $file - $!";
	}
    while (<INPUT>) {
	$first = $_ unless $first;
	$last = $_;
	next unless /reject=/;
	($ruleset, $arg1, $relay, $reject, $message) =
	    /ruleset=(.*?), arg1=(.*?), relay=(.*?), reject=(\d+)\s+(.*)/;

	if ($opt_a) {
	    $ruleset{$ruleset}++;
	    $arg1{$arg1}++;
	    $relay{$relay}++;
	    $reject{$reject}++;
	    }
	$message{$message}++;
	$cnt++;
	}
    close INPUT;
    }

$from = $1 if $first =~ /^(.{7}\d\d:\d\d:\d\d )/;
$to = $1 if $last =~ /^(.{7}\d\d:\d\d:\d\d )/;
print "\nSendmail Rejected Messages for $from - $to\n";
print "-----------------------------------------------------------------\n";
print "$cnt rejections processed\n";

if ($opt_a) {
    print "\nRulesets:\n";
    for (sort {$ruleset{$b} <=> $ruleset{$a} || $a cmp $b} keys %ruleset) {
	printf "    %4d %s\n", $ruleset{$_}, $_;
	}

    print "\nArg1:\n";
    for (sort {$arg1{$b} <=> $arg1{$a} || $a cmp $b} keys %arg1) {
	printf "    %4d %s\n", $arg1{$_}, $_;
	}

    print "\nRelays:\n";
    for (sort {$relay{$b} <=> $relay{$a} || $a cmp $b} keys %relay) {
	printf "    %4d %s\n", $relay{$_}, $_;
	}

    print "\nRejects:\n";
    for (sort {$a <=> $b} keys %reject) {
	printf "    %4d %s\n", $reject{$_}, $_;
	}

    print "\nMessages:\n";
    }

for (sort {$message{$b} <=> $message{$a} || $a cmp $b} keys %message) {
    printf "    %4d %s\n", $message{$_}, $_;
    }
